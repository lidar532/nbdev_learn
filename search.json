[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_learn",
    "section": "",
    "text": "NBdev will convert this file (index.ipynb) into the README.md file for the project."
  },
  {
    "objectID": "index.html#about-this-file-index.ipynb",
    "href": "index.html#about-this-file-index.ipynb",
    "title": "nbdev_learn",
    "section": "",
    "text": "NBdev will convert this file (index.ipynb) into the README.md file for the project."
  },
  {
    "objectID": "index.html#what-is-nbdev_learn",
    "href": "index.html#what-is-nbdev_learn",
    "title": "nbdev_learn",
    "section": "What is nbdev_learn",
    "text": "What is nbdev_learn\nnbdev_learn is a simple Python Notebook github based project intended as a simple example of how to use the nbdev tools to generate: * a python package, * python modules, * online web based documentation, * continous Integration (CI).\nAll from one or more Jupyter Notebooks."
  },
  {
    "objectID": "index.html#what-nbdev-adds-to-the-project",
    "href": "index.html#what-nbdev-adds-to-the-project",
    "title": "nbdev_learn",
    "section": "What NBdev adds to the project",
    "text": "What NBdev adds to the project\n\nsettings.ini\nsetup.py\n/nbs\n/nbdev_learn\n\nlibA.py is generated from the source python notebook 00_libA.ipynb and libB.py is generated by 10_libB.ipynb."
  },
  {
    "objectID": "index.html#the-process-of-building-nbdev_learn-package-using-jupyterlab",
    "href": "index.html#the-process-of-building-nbdev_learn-package-using-jupyterlab",
    "title": "nbdev_learn",
    "section": "The process of building nbdev_learn package using JupyterLab",
    "text": "The process of building nbdev_learn package using JupyterLab\n\nCreate github repository using your browser.\nGenerate ssh key for the repository.\ngit clone the repository.\nRun nbdev_new: This populates the project repository.\nPopulated nbdev_learn/nbs folder with notebook files 00_libA.ipynb and 10_libB.ipynb. These are the files that the package will be generated from. They contain the function defs., as well as the testing and example code.\nCreated the Makefile and populated it with all of the operations that will be used to build up the package during development."
  },
  {
    "objectID": "index.html#notes",
    "href": "index.html#notes",
    "title": "nbdev_learn",
    "section": "Notes",
    "text": "Notes\n\nMost useful directives\nAll of the directives can be found at: https://nbdev.fast.ai/explanations/directives.html\n#|default_exp &lt;name&gt;      Sets the export module name to &lt;name&gt;.\n#|export                  Exports the following cell.\n#|hide                    \n#|code-fold: &lt;show|true&gt;  true to collapse, show makes it expanded.\n#|exporti                 Exports the items in the cell into the generated module and documentation but not part of the public api.\n\n\nFull list of directives\nA full list of all nbdev commands can be viewed by running nbdev_help.\n\n!nbdev_help\n\nnbdev_bump_version        Increment version in settings.ini by one\nnbdev_changelog           Create a CHANGELOG.md file from closed and labeled GitHub issues\nnbdev_clean               Clean all notebooks in `fname` to avoid merge conflicts\nnbdev_conda               Create a `meta.yaml` file ready to be built into a package, and optionally build and upload it\nnbdev_create_config       Create a config file.\nnbdev_docs                Create Quarto docs and README.md\nnbdev_export              Export notebooks in `path` to Python modules\nnbdev_filter              A notebook filter for Quarto\nnbdev_fix                 Create working notebook from conflicted notebook `nbname`\nnbdev_help                Show help for all console scripts\nnbdev_install             Install Quarto and the current library\nnbdev_install_hooks       Install Jupyter and git hooks to automatically clean, trust, and fix merge conflicts in notebooks\nnbdev_install_quarto      Install latest Quarto on macOS or Linux, prints instructions for Windows\nnbdev_merge               Git merge driver for notebooks\nnbdev_migrate             Convert all markdown and notebook files in `path` from v1 to v2\nnbdev_new                 Create an nbdev project.\nnbdev_prepare             Export, test, and clean notebooks, and render README if needed\nnbdev_preview             Preview docs locally\nnbdev_proc_nbs            Process notebooks in `path` for docs rendering\nnbdev_pypi                Create and upload Python package to PyPI\nnbdev_readme              None\nnbdev_release_both        Release both conda and PyPI packages\nnbdev_release_gh          Calls `nbdev_changelog`, lets you edit the result, then pushes to git and calls `nbdev_release_git`\nnbdev_release_git         Tag and create a release in GitHub for the current version\nnbdev_sidebar             Create sidebar.yml\nnbdev_test                Test in parallel notebooks matching `path`, passing along `flags`\nnbdev_trust               Trust notebooks matching `fname`\nnbdev_update              Propagate change in modules matching `fname` to notebooks that created them\n\n\n\n\nYoutube Videos\n\nnbdev tutorial by Jeremy Howard and Hamel Husain\nnbdev live coding with Hamel Husain"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_learn",
    "section": "Install",
    "text": "Install\npip install nbdev_learn"
  },
  {
    "objectID": "index.html#how-to-use-nbdev_learn",
    "href": "index.html#how-to-use-nbdev_learn",
    "title": "nbdev_learn",
    "section": "How to use nbdev_learn",
    "text": "How to use nbdev_learn\nUse nbdev_learn to try different things and experiment with the code.\nLets’ start by importind the libA module as nba.\n\nimport nbdev_learn.libA as nba\n\nLet’s also import libB as nbb.\n\nimport nbdev_learn.libB as nbb\n\nWe can now examine nba and nbb using the ? feature.\n\nnba?\n\n\nType:        module\nString form: &lt;module 'nbdev_learn.libA' from '/home/jovyan/work/github-projects/nbdev_learn/nbdev_learn/libA.py'&gt;\nFile:        ~/work/github-projects/nbdev_learn/nbdev_learn/libA.py\nDocstring:   &lt;no docstring&gt;\n\n\n\n\nnbb?\n\n\nType:        module\nString form: &lt;module 'nbdev_learn.libB' from '/home/jovyan/work/github-projects/nbdev_learn/nbdev_learn/libB.py'&gt;\nFile:        ~/work/github-projects/nbdev_learn/nbdev_learn/libB.py\nDocstring:   &lt;no docstring&gt;\n\n\n\n\nnba.func_a()\n\n\"This returned from func_a( a='A', b='B')\"\n\n\n\nnba.func_b()\n\n\"This returned from func_b(c='C', d='D')\"\n\n\n\nnba.func_b( c = 'CCCCC')\n\n\"This returned from func_b(c='CCCCC', d='D')\"\n\n\n\nnba.func_a()\n\n\"This returned from func_a( a='A', b='B')\"\n\n\n\nnbb.func_c()\n\n\"This returned from func_c(c='A', cc='B')\"\n\n\n\nnbb.func_d()\n\n\"This returned from func_b(d='C', dd='D')\"\n\n\n\nimport nbdev_learn as nbl\n\n\nnbl.libA.func_a()\n\n\"This returned from func_a( a='A', b='B')\"\n\n\n\nnbl.libB.func_c()\n\n\"This returned from func_c(c='A', cc='B')\"\n\n\n\nnbl.__version__\n\n'0.0.3'\n\n\n\nnbl??\n\n\nType:        module\nString form: &lt;module 'nbdev_learn' from '/home/jovyan/work/github-projects/nbdev_learn/nbdev_learn/__init__.py'&gt;\nFile:        ~/work/github-projects/nbdev_learn/nbdev_learn/__init__.py\nSource:      __version__ = \"0.0.3\"\n\n\n\n\nnbl.__path__\n\n['/home/jovyan/work/github-projects/nbdev_learn/nbdev_learn']\n\n\n\nfrom nbdev_learn import libA as la\n\n\nfrom nbdev_learn import libA"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "nbdev_learn",
    "section": "References",
    "text": "References\n\nNBdev End-To-End Walkthrough\ngithub nbdev repo\nOnline docs for nbdev_learn generated by nbdev.\nnbdev+Quarto: A new secret weapon for productivity\nGoogle Python Style Guide\nLiterate Programming\nRead–eval–print loop Read, Evaluate, Print, Loop\nExploratory programming: what it is, why it matters & what it requires\nSoftware Artifact"
  },
  {
    "objectID": "libb.html",
    "href": "libb.html",
    "title": "libB",
    "section": "",
    "text": "NBdev will convert this file (libB.ipynb) into the python module file libB.py and store it in the nbdev_learn directory. The nbdev_learn subdirectory is where the package files will reside.\n\nsource\n\n\n\n func_c (c='A', cc='B')\n\nA very simple function that returns a string identifying itself.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nstr\nA\nA variable\n\n\ncc\nstr\nB\nAnother variable\n\n\nReturns\nstr\n\nJust returns a string that identifies the function.\n\n\n\n\n\nRun the function with the default parameters.\n\nrv = func_c()\nprint( rv )\n\nThis returned from func_c(c='A', cc='B')\n\n\nRun the function with the user set parameters.\n\nrv = func_c( c='AAAAA', cc='BBBBBB')\nprint( rv )\n\nThis returned from func_c(c='AAAAA', cc='BBBBBB')\n\n\n\nsource\n\n\n\n\n\n func_d (d='C', dd='D')\n\nSimple function that returns a string to identify itself.\n\n\nRun the function with the default parameters.\n\nrv = func_d()\nprint( rv )\n\nThis returned from func_b(d='C', dd='D')\n\n\nRun the function with the user set parameters.\n\nrv = func_d( d = 'CCCCCCC', dd='DDDDDDDD')\nprint( rv )\n\nThis returned from func_b(d='CCCCCCC', dd='DDDDDDDD')\n\n\n\nfunc_c?\n\n\nSignature: func_c(c='A', cc='B') -&gt; str\nDocstring: A very simple function that returns a string identifying itself.\nFile:      /tmp/ipykernel_22706/2665672100.py\nType:      function\n\n\n\n\nfunc_c??\n\n\nSignature: func_c(c='A', cc='B') -&gt; str\nSource:   \ndef func_c(c='A', # A variable\n           cc='B'  # Another variable\n          ) -&gt; str: # Just returns a string that identifies the function.\n    '''\n    A very simple function that returns a string identifying itself.\n    '''\n    return f\"This returned from func_c({c=}, {cc=})\"\nFile:      /tmp/ipykernel_22706/2665672100.py\nType:      function"
  },
  {
    "objectID": "libb.html#about-this-file-libb.ipynb",
    "href": "libb.html#about-this-file-libb.ipynb",
    "title": "libB",
    "section": "",
    "text": "NBdev will convert this file (libB.ipynb) into the python module file libB.py and store it in the nbdev_learn directory. The nbdev_learn subdirectory is where the package files will reside.\n\nsource\n\n\n\n func_c (c='A', cc='B')\n\nA very simple function that returns a string identifying itself.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nstr\nA\nA variable\n\n\ncc\nstr\nB\nAnother variable\n\n\nReturns\nstr\n\nJust returns a string that identifies the function.\n\n\n\n\n\nRun the function with the default parameters.\n\nrv = func_c()\nprint( rv )\n\nThis returned from func_c(c='A', cc='B')\n\n\nRun the function with the user set parameters.\n\nrv = func_c( c='AAAAA', cc='BBBBBB')\nprint( rv )\n\nThis returned from func_c(c='AAAAA', cc='BBBBBB')\n\n\n\nsource\n\n\n\n\n\n func_d (d='C', dd='D')\n\nSimple function that returns a string to identify itself.\n\n\nRun the function with the default parameters.\n\nrv = func_d()\nprint( rv )\n\nThis returned from func_b(d='C', dd='D')\n\n\nRun the function with the user set parameters.\n\nrv = func_d( d = 'CCCCCCC', dd='DDDDDDDD')\nprint( rv )\n\nThis returned from func_b(d='CCCCCCC', dd='DDDDDDDD')\n\n\n\nfunc_c?\n\n\nSignature: func_c(c='A', cc='B') -&gt; str\nDocstring: A very simple function that returns a string identifying itself.\nFile:      /tmp/ipykernel_22706/2665672100.py\nType:      function\n\n\n\n\nfunc_c??\n\n\nSignature: func_c(c='A', cc='B') -&gt; str\nSource:   \ndef func_c(c='A', # A variable\n           cc='B'  # Another variable\n          ) -&gt; str: # Just returns a string that identifies the function.\n    '''\n    A very simple function that returns a string identifying itself.\n    '''\n    return f\"This returned from func_c({c=}, {cc=})\"\nFile:      /tmp/ipykernel_22706/2665672100.py\nType:      function"
  },
  {
    "objectID": "liba.html",
    "href": "liba.html",
    "title": "libA",
    "section": "",
    "text": "NBdev will convert this file (libA.ipynb) into the python module file libA.py and store it in the nbdev_learn directory. The nbdev_learn subdirectory is where the package files will reside.\n\nsource\n\n\n\n func_a (a='A', b='B')\n\nA very simple function that returns a string identifying itself.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\na\nstr\nA\nA variable\n\n\nb\nstr\nB\nAnother variable\n\n\nReturns\nstr\n\nJust returns a string that identifies the function.\n\n\n\n\n\nBasic usage with default parameter values.\n\nrv = func_a()\nprint( rv )\n\nThis returned from func_a( a='A', b='B')\n\n\nExample with user provided parameters values.\n\nrv = func_a( a='AAA', b='BBB')\nprint( rv )\n\nThis returned from func_a( a='AAA', b='BBB')\n\n\nWe can always get more informatio about a function, or any other object, but typing its name followed by a ‘?’ mark.\n\nfunc_a?\n\n\nSignature: func_a(a='A', b='B') -&gt; str\nDocstring: A very simple function that returns a string identifying itself.\nFile:      /tmp/ipykernel_13447/2120989924.py\nType:      function\n\n\n\nYou can get the source code for the function by following the name with two quesrtion marks ‘??’.\n\nfunc_a??\n\n\nSignature: func_a(a='A', b='B') -&gt; str\nSource:   \ndef func_a(a='A', # A variable\n           b='B'  # Another variable\n          ) -&gt; str: # Just returns a string that identifies the function.\n    '''\n    A very simple function that returns a string identifying itself.\n    '''\n    return f\"This returned from func_a( {a=}, {b=})\"\nFile:      /tmp/ipykernel_13447/2120989924.py\nType:      function\n\n\n\n\nsource\n\n\n\n\n\n func_b (c='C', d='D')\n\nSimple function that returns a string to identify itself.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nstr\nC\nA variable named c\n\n\nd\nstr\nD\nAnother variable, this one named d\n\n\nReturns\nstr\n\nIt returns a string\n\n\n\n\n\nUsage with default parameters\n\nrv = func_b()\nprint( rv )\n\nThis returned from func_b(c='C', d='D')\n\n\nUsage with user provided parameter values.\n\nrv = func_b( c = 'CCCC', d = 'DDDDD')\nprint( rv )\n\nThis returned from func_b(c='CCCC', d='DDDDD')"
  },
  {
    "objectID": "liba.html#about-this-file-liba.ipynb",
    "href": "liba.html#about-this-file-liba.ipynb",
    "title": "libA",
    "section": "",
    "text": "NBdev will convert this file (libA.ipynb) into the python module file libA.py and store it in the nbdev_learn directory. The nbdev_learn subdirectory is where the package files will reside.\n\nsource\n\n\n\n func_a (a='A', b='B')\n\nA very simple function that returns a string identifying itself.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\na\nstr\nA\nA variable\n\n\nb\nstr\nB\nAnother variable\n\n\nReturns\nstr\n\nJust returns a string that identifies the function.\n\n\n\n\n\nBasic usage with default parameter values.\n\nrv = func_a()\nprint( rv )\n\nThis returned from func_a( a='A', b='B')\n\n\nExample with user provided parameters values.\n\nrv = func_a( a='AAA', b='BBB')\nprint( rv )\n\nThis returned from func_a( a='AAA', b='BBB')\n\n\nWe can always get more informatio about a function, or any other object, but typing its name followed by a ‘?’ mark.\n\nfunc_a?\n\n\nSignature: func_a(a='A', b='B') -&gt; str\nDocstring: A very simple function that returns a string identifying itself.\nFile:      /tmp/ipykernel_13447/2120989924.py\nType:      function\n\n\n\nYou can get the source code for the function by following the name with two quesrtion marks ‘??’.\n\nfunc_a??\n\n\nSignature: func_a(a='A', b='B') -&gt; str\nSource:   \ndef func_a(a='A', # A variable\n           b='B'  # Another variable\n          ) -&gt; str: # Just returns a string that identifies the function.\n    '''\n    A very simple function that returns a string identifying itself.\n    '''\n    return f\"This returned from func_a( {a=}, {b=})\"\nFile:      /tmp/ipykernel_13447/2120989924.py\nType:      function\n\n\n\n\nsource\n\n\n\n\n\n func_b (c='C', d='D')\n\nSimple function that returns a string to identify itself.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nc\nstr\nC\nA variable named c\n\n\nd\nstr\nD\nAnother variable, this one named d\n\n\nReturns\nstr\n\nIt returns a string\n\n\n\n\n\nUsage with default parameters\n\nrv = func_b()\nprint( rv )\n\nThis returned from func_b(c='C', d='D')\n\n\nUsage with user provided parameter values.\n\nrv = func_b( c = 'CCCC', d = 'DDDDD')\nprint( rv )\n\nThis returned from func_b(c='CCCC', d='DDDDD')"
  }
]